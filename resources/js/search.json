[[{"l":"Simple Inventory System","p":["work in progress \uD83D\uDEE0️"]}],[{"l":"Create an ItemUI Prefab","p":["This section describes creating prefabs with the ItemUI component. The ItemUI Component is necessary for handling user interaction with the inventory system."]},{"l":"Quick Creation","p":["Duplicate TEMPLATE_ItemUI prefab in the folder","Rename the newly duplicated prefab","You may skip this section and proceed to Setup ItemUI prefab if you duplicated the template and renamed the prefab."]},{"l":"Manual Creation","p":["0","1","50","75","Add a GameObject with an attached Image component under the ItemPrefab. The ItemUI Prefab should contain 3 children, or 4 if the Stack Count text was added from the last steps.","Add a new Game Object under the ItemUI Prefab. ItemUI Prefab should now have 3 children. The new Game Object should contain an attached Text Component. One way to do this is to right click the ItemUI Prefab and choose the option UI > Text - Text Mesh Pro","Add an ItemUI Component","Alignment","axis","Change the Image's transparency to 0. You may save this step for later if you would like to reference the overall image size during the setup phase.","Change the size to whatever number to fit the text. We are using size 12.","Change the text field to a number. Try 0.","Create a new empty GameObject in the scene and attach an Image Component.","Drag and drop a Backdrop prefab under the ItemUI Prefab. The ItemUI Prefab should contain 2 children at this point, the Empty Grid Prefab and the Backdrop Prefab. The Backdrop Prefab can be found in the folder","Drag and drop an Empty Grid of your item's desired size under the Item UI Prefab. The Empty Grid Prefabs can be found in the folder","Font Size","Height","i.e. Potion_UI, Backpack_UI, Rifle_UI, etc.","If there is no empty grid that matches your size, please see the section Creating an Empty Grid.","In this example, we use 50 for the TransformRect's Height. This number could be anything the developer needs it to be.","In this example, we use 75 for the TransformRect's Width and Height. This number could be anything the developer needs it to be.","It should look like the following image.","Left","Max","Min","Modify the Rect Transform of Stack Count","Modify the RectTransform component of the Image GameObject.","Modify the RectTransform's values with the following:","Modify the TextMeshPro - Text (UI) component","Modifying the Width and Height depends on the size that the Item UI will take up in the grid system. For now, set Width and Height to 75.","Next, drag and drop the newly created GameObject into a prefabs folder in the Project window. In this example, the GameObject Sample ItemUI will be placed in the folder","Open the Prefab by double clicking the Prefab or by Right Clicking the Prefab and choosing the Open option.","Rename the Prefab to whatever your item's name will be.To differentiate it from the prefab containing the model that we will create later, you can include the word UI in the name.","Rename the text's Game Object to \"Stack Count\" for clarity's sake.","Right","Text Input","The alignment should be Right aligned and Bottom aligned. Clicking the third buttons of the top and bottom row should do the trick.","The following instructions are necessary steps for creating stackable items. If your items are not meant to be stackable, then steps 11-14 can be skipped. These steps also assume the user has the package installed in their project.","value","Width","With this section complete, we will continue with setting up the Item UI.","X","Y","You may delete the GameObject in the Scene now that there is a Prefab for it.","Z"]}],[{"l":"Setup an ItemUI Prefab","p":["150","4a. Right click the Empty Grid GameObject and choose the option Unpack Prefab Completely. This assures us that we will not be modifying the source Prefab, or allow this GameObject to be updated by any changes made to the source Prefab.","4b. Modify the Rect Transform Component","4c. Duplicate the Image child GameObject under the Empty Grid GameObject. We will need to do this 3 times, to make a total of 4 child GameObjects.","4d. Optional. You may rename the Empty Grid GameObject to better reflect the dimensions.","4e. Optional. You may drag and drop the GameObject into the Project window to turn it into a Prefab.","After the steps are completed, the ItemUI should be finished and look similar to the image below.","All the values should still be the same from the previous section. The only changes that will be made are to Width and Height.","At this point, your ItemUI prefab should look like the above image.","axis","Backdrop Image","Change the Source Image attribute to whatever you want for your Item.","ContainerUI Prefab refers to the storage capacity of the prefab. I.e. a backpack, a pouch, or some other container. We will discuss the creation of this at a later section. For now, it can be left blank if the item is a generic item OR drag and drop a Backpack or Pouch cells prefab from the folder","Drag and drop the Image child GameObjectinto the Image field","Empty Grid Container","Height","Height, similar width, except vertically inclined.","If an empty grid with the correct dimensions was previously placed, then this step and substeps can be skipped. Proceed to Step 5.","If done correctly, the cells should be nicely fit inside the ItemUI Prefab. Compare to the image before with the following image.","If our system is using 75 pixels and the ItemUI's component's Width value is 2, then the ItemUI Prefab's Width = 75 * 2 = 150","In our example, I decided to change the dimensions of the ItemUI Prefab to 2x2. Therefore, I will need to manually change the GameObject as well.","In our example, the item is 2x2, therefore the width and height should be 150","In the example, we will be using a placeholder icon.","Modify the Image Component of the Image GameObject under the ItemUI Prefab","Modify the Rect Transform of the Image GameObject under the ItemUI Prefab","Modify the Rect Transform of the ItemUI Prefab","Modify the values of the Item UI Component","Set the Item Name","Set the Item Tag. An Item Tag determines where the item will be equipped. Typically the \"Any\" Item Tag will go wherever it is allowed to go. (We will cover how to apply new Item Tags in a later section)","Set the Rarity (We will cover how to apply new rarities in a later section)","Similar to the ItemUI Prefab, the Width and Height should correspond to the dimensions of a cell and the units of the ItemUI Prefab.","Simply drag and drop the child GameObjects of the ItemUI Prefab.","Stack Limit is defaulted to 1. The system will treat the ItemUI as if it is a singular non-stackable item. Change the value if it is meant to stack and hold a larger quantity.","The image below assumes the width and height of the ItemUI component are 2x2. And shows a complete ItemUI component.","The image of the ItemUI Prefab should not be modified, except for the 0 value for the transparency we applied earlier. It does sound intuitive to attach the picture or icon of the image there, but the Image component of the Prefab is only for handling user interactions.","The same goes for the Height value.","There are three sections for this.","These following substeps assume we are modifying a ItemUI with a cell size of 2x2 and a grid system with each cell being 75x75 pixels.","This section describes setting up the ItemUI Prefabs created in the previous section. This tutorial assumes all the necessary GameObjects and components have been added to the Item UI Prefab and that the user has the necessary data and images required to complete the Prefab.","value","Width","Width is the space an item will take up in a Grid system. Recommend setting to 1 if unknown. Otherwise, put the value in units of 1 cell. I.e. if an item is meant to take up 2 cells in width, then assign 2 as the value.","Width should be the desired pixel size of each cell in the Grid system multiplied by the ItemUI component's Width."]}],[{"l":"Create an Item Prefab","p":["7a. The PickUpRange GameObject should simply have a Pick Up Range Component attached.","7b. A Sphere Collider should be attached to the Pickup Range GameObject. During gameplay, a GameObject with the Player_IS Component will check for collisions with GameObjects containing the PickUp Range Component. Decrease the radius to shrink the distance required for a player to be within pick. If the Player_IS is not colliding with the PickUpRange, then the item will not be picked up. Ensure that Is Trigger is checked.","A Sphere Collider should be attached to the Pickup GameObject. You can change the radius to increase its detection by a RayCast. Ensure that Is Trigger is checked.","Alter Position: Changes where the item is positioned in respect to where it will be parented once equipped.","Alter Rotation: Changes how the item is rotated in respect to where it will be parented once equipped.","Changes the scale of an item in respect to where it will be parented once equipped.","Create the Prefab with a model. If the prefab is already created, skip this step. Otherwise, drag and drop a model onto the Scene View. Then drag and drop it from the Scene Hierarchy into the Project Window to create a prefab.","Drag and Drop the Item Prefab to the Item Game Object attribute.","Drag and Drop the Item Prefab with a Rigid Body to the Item Rigid Body attribute.","Drag and drop the ItemUI child GameObject to the ItemUI attribute.","Drag and drop the PickUp Prefab under the Item Prefab.The Item Prefab should now contain 1 child GameObject. The PickUp Prefab can be found in the folder","Drag and drop the respective ItemUI Prefab under the Item Prefab.The Item Prefab should now contain 2 children GameObjects","If done correctly, you should see 2 Sphere Colliders. One larger collider encompassing the other smaller collider.","If done successfully,the PickUp Prefab should look like the above image and the PickUp component should be filled out as such.","In this example, I will be using the 2x2 ItemUI that I created earlier.","Modify the PickUp Component under the PickUp GameObject","Open the newly created Item Prefab","Sometimes an item carried on a person will be smaller or larger than how its being represented on the screen. It may have a certain rotation or position on the person's body. Assign the values here to alter how an item is positioned, rotated, or scaled on a character. This section will not go in-depth with setting this up since its use case is too specific.","The component has 3 sections","The PickUp Range attribute has already been completed. If the user has another collider they want to connect, then they may replace that value.","The PickUpRange GameObject should be a child of the PickUp GameObject","These refer to the GameObject holding the ItemUI Prefab or the Rigid Body component. In most cases, it will be the Item Prefab in question. Ensure that the Item Prefab has a RigidBody.","This section describes creating an Item. The Item is interactable in the game world that will include an ItemUI Prefab as its child."]}]]